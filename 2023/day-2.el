;; -*- lexical-binding: t -*-

(defvar game-rx "Game \\([0-9]+\\): ")

(defun read-line ()
  (buffer-substring (point) (line-end-position)))

(defun read-games (file)
  (let ((games nil))
    (with-temp-buffer
      (insert-file-contents file)
      (while (re-search-forward game-rx nil t)
	(let ((id (read (match-string 1))))
	  (push (cons id (read-line)) games))))
    (nreverse games)))

(defvar cube-limits
  '((red . 12)
    (green . 13)
    (blue . 14)))

(defun possible (game)
  (let* ((id (car game))
	 (string (cdr game))
	 (sets (split-string string ";" nil " ")))
    (dolist (set sets)
      (dolist (cubes (split-string set "," nil " "))
	(let* ((split (split-string cubes " "))
	       (count (read (car split)))
	       (color (read (cadr split)))
	       (limit (alist-get color cube-limits)))
	  (when (> count limit)
	    (setq id 0))))
       id)))

(defun puzzle-2a ()
  (let ((games (read-games "data/input-2.txt"))
	(sum 0))
    (dolist (game games)
      (setq sum (+ sum (possible game))))
    sum))

(defun power (game)
  (let ((minimum nil)
	(sets (split-string (cdr game) ";" nil " ")))
    (dolist (set sets)
      (dolist (cubes (split-string set "," nil " "))
	(let* ((split (split-string cubes " "))
	       (count (read (car split)))
	       (color (read (cadr split)))
	       (min (alist-get color minimum)))
	  (if (null min)
	      (push (cons color count) minimum)
	    (setf (alist-get color minimum) (max min count))))))
    (seq-reduce #'* (mapcar #'cdr minimum) 1)))

(defun puzzle-2b ()
  (let ((games (read-games "data/input-2.txt"))
	(sum 0))
    (dolist (game games)
      (setq sum (+ sum (power game))))
    sum))
