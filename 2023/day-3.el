;; -*- lexical-binding: t -*-

(defun read-grid (file)
  (with-temp-buffer
    (insert-file-contents file)
    (let* ((height (line-number-at-pos (1- (point-max))))
	   (grid (make-vector height nil)))
      (dotimes (i height)
	(let ((row (buffer-substring (point) (line-end-position))))
	  (aset grid i row)
	  (forward-line)))
      grid)))

(defun insert-grid (grid)
  (seq-do (lambda (row)
	    (insert row)
	    (insert ?\n))
	  grid))

(defun grid-height (grid)
  (length grid))

(defun grid-width (grid)
  (length (aref grid 0)))

(defun gset (grid pos value)
  "Ignores out-of-bounds references"
  (pcase-let* ((`(,i . ,j) pos))
    (when (and (>= i 0) (< i (length grid)))
      (let ((row (aref grid i)))
	(when (and (>= j 0) (< j (length row)))
	  (aset row j value))))))

(defun gref (grid pos)
  "Returns nil for out-of-bounds references"
  (pcase-let* ((`(,i . ,j) pos))
    (when (and (>= i 0) (< i (length grid)))
      (let ((row (aref grid i)))
	(when (and (>= j 0) (< j (length row)))
	  (aref row j))))))

(defun char-digitp (c)
  (and (>= c ?0) (<= c ?9)))

(defun char-symbolp (c)
  (not (or (char-digitp c) (eq c ?.))))

(defun range (start length)
  (let ((range nil))
    (dotimes (i length)
      (push (+ start i) range))
    (nreverse range)))

(defun perimeter (pos size)
  (pcase-let ((`(,i . ,j) pos))
    (let* ((left (cons i (1- j)))
	   (right (cons i (+ j size)))
	   (extent (range (1- j) (+ size 2)))
	   (top (mapcar (lambda (j)
			  (cons (1- i) j))
			extent))
	   (bottom (mapcar (lambda (j)
			     (cons (1+ i) j))
			   extent)))
      `(,left ,@top ,right ,@bottom))))

(defun adjacentp (grid pos size)
  (catch :done
    (dolist (pos (perimeter pos size))
      (when-let* ((c (gref grid pos)))
	(when (char-symbolp c)
	  (throw :done t))))))

(defun puzzle-3a ()
  (let ((grid (read-grid "data/input-3.txt"))
	(sum 0))
    (dotimes (i (grid-height grid))
      (let ((row (aref grid i))
	    (j 0))
	(while (< j (length row))
	  (if (char-digitp (aref row j))
	      (let* ((rest (substring row j))
		     (digits (seq-take-while #'char-digitp rest))
		     (n (read digits))
		     (size (length digits)))
		(when (adjacentp grid (cons i j) size)
		  (setq sum (+ sum n)))
		(setq j (+ j size)))
	    (setq j (1+ j))))))
    sum))
