;; -*- lexical-binding: t -*-

(defun read-line ()
  (buffer-substring (point) (line-end-position)))

(defun read-list (string)
  (read (concat "(" string ")")))

(defun read-map ()
  (let ((map-rx ".* map:"))
    (when (re-search-forward map-rx nil t)
      (let ((ranges nil))
	(forward-line)
	(let ((line (read-line)))
	  (while (> (length line) 0)
	    (push (read-list line) ranges)
	    (forward-line)
	    (setq line (read-line))))
	ranges))))

(defun read-almanac (file)
  (with-temp-buffer
    (insert-file-contents file)
    (re-search-forward "seeds: \\(.*\\)")
    (let ((maps nil)
	  (seeds (read-list (match-string 1))))
      (while-let ((map (read-map)))
	(push map maps))
      (cons seeds (nreverse maps)))))

(defun map-seed (seed maps)
  (dolist (map maps)
    (let ((mapped seed))
      (dolist (range map)
	(pcase-let ((`(,to ,from ,n) range))
	  (let ((offset (- seed from)))
	    (when (and (>= offset 0) (< offset n))
	      (setq mapped (+ to offset))))))
      (setq seed mapped)))
  seed)

(defun puzzle-5a ()
  (let* ((almanac (read-almanac "data/input-5.txt"))
	 (seeds (car almanac))
	 (maps (cdr almanac))
	 (lowest nil))
    (dolist (seed seeds)
      (let ((seed (map-seed seed maps)))
	(if (null lowest)
	    (setq lowest seed)
	  (setq lowest (min seed lowest)))))
    lowest))

(defun pairwise (list)
  (let ((pairs nil))
    (while-let ((a (car list))
		(b (cadr list)))
      (push (cons a b) pairs)
      (setq list (cddr list)))
    (nreverse pairs)))

(defun sunder (seed range)
  (pcase-let ((`(,start . ,m) seed)
	      (`(,to ,from ,n) range))
    (let ((scaled nil)
	  (passed nil))
      (when (< start from)
	(let ((high (min (+ start m) from)))
	  (push (cons start (- high start)) passed)))
      (when (or (and (>= start from)
		     (< start (+ from n)))
		(and (> (+ start m) from)
		     (< (+ start m) (+ from n))))
	(let* ((offset (- to from))
	       (low (+ offset (max start from)))
	       (high (+ offset (min (+ start m) (+ from n)))))
	  (setq scaled (cons low (- high low)))))
      (when (> (+ start m) (+ from n))
	(let ((low (max start (+ from n))))
	  (push (cons low (- (+ start m) low)) passed)))
      (cons scaled passed))))

(defun puzzle-5b ()
  (let* ((almanac (read-almanac "data/input-5.txt"))
	 (seeds (pairwise (car almanac)))
	 (maps (cdr almanac)))
    (dolist (map maps)
      (let ((scaled nil))
	(dolist (range map)
	  (let ((passed nil))
	    (dolist (seed seeds)
	      (let ((sundered (sunder seed range)))
		(when (car sundered)
		  (push (car sundered) scaled))
		(setq passed (append passed (cdr sundered)))))
	    (setq seeds passed)))
	(setq seeds (append scaled seeds))))
    (let ((locations (mapcar #'car seeds)))
      (seq-reduce #'min locations (car locations)))))
