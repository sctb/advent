;; -*- lexical-binding: t -*-

(defun read-line ()
  (buffer-substring (point) (line-end-position)))

(defun read-list (string)
  (read (concat "(" string ")")))

(defun read-map ()
  (let ((map-rx ".* map:"))
    (when (re-search-forward map-rx nil t)
      (let ((ranges nil))
	(forward-line)
	(let ((line (read-line)))
	  (while (> (length line) 0)
	    (push (read-list line) ranges)
	    (forward-line)
	    (setq line (read-line))))
	ranges))))

(defun read-almanac (file)
  (with-temp-buffer
    (insert-file-contents file)
    (re-search-forward "seeds: \\(.*\\)")
    (let ((maps nil)
	  (seeds (read-list (match-string 1))))
      (while-let ((map (read-map)))
	(push map maps))
      (cons seeds (nreverse maps)))))

(defun map-seed (seed maps)
  (dolist (ranges maps)
    (let ((mapped seed))
      (dolist (range ranges)
	(pcase-let ((`(,to ,from ,n) range))
	  (let ((offset (- seed from)))
	    (when (and (>= offset 0) (< offset n))
	      (setq mapped (+ to offset))))))
      (setq seed mapped)))
  seed)

(defun puzzle-5a ()
  (let* ((almanac (read-almanac "data/input-5.txt"))
	 (seeds (car almanac))
	 (maps (cdr almanac))
	 (lowest nil))
    (dolist (seed seeds)
      (let ((seed (map-seed seed maps)))
	(if (null lowest)
	    (setq lowest seed)
	  (setq lowest (min seed lowest)))))
    lowest))

(defun pairwise (list)
  (let ((pairs nil))
    (while-let ((a (car list))
		(b (cadr list)))
      (push (cons a b) pairs)
      (setq list (cddr list)))
    (nreverse pairs)))

(defun fragment (start span range)
  (let ((fragments nil))
    (pcase-let ((`(,to ,from ,n) range))
      (when (< start from)
	(let ((span (min span (- from start))))
	  (push (cons start span) fragments)))
      (when (> (+ start span) from)
	(let* ((start (max start from))
	       (span (min span (- (+ from n) start)))
	       (offset (- to from)))
	  (when (> span 0)
	    (push (cons (+ offset start) span) fragments))))
      (when (> (+ start span) (+ from n))
	(let ((start (max start (+ from n))))
	  (push (cons start span) fragments))))
    fragments))

(defun puzzle-5b ()
  (let* ((almanac (read-almanac "data/example-5.txt"))
	 (seeds (pairwise (car almanac)))
	 (maps (cdr almanac))
	 (lowest nil))
    (dolist (ranges (take 2 maps))
      (let ((mapped nil))
	(dolist (range ranges)
	  (dolist (pair seeds)
	    (let ((start (car pair))
		  (span (cdr pair)))
	      (dolist (pair (fragment start span range))
		(push pair mapped)))))
	(message "%s" mapped)
	(setq seeds mapped)))
    lowest))
