;; -*- lexical-binding: t -*-

(defun read-line ()
  (prog1
      (buffer-substring (point) (line-end-position))
    (forward-line)))

(defun read-network (file)
  (with-temp-buffer
    (insert-file-contents file)
    (let ((insts (read-line)))
      (forward-line)
      (let ((rx "\\([0-9A-Z]+\\) = (\\([0-9A-Z]+\\), \\([0-9A-Z]+\\))")
	    (nodes (make-hash-table)))
	(while (re-search-forward rx nil t)
	  (let ((node (intern (match-string 1)))
		(left (intern (match-string 2)))
		(right (intern (match-string 3))))
	    (puthash node (cons left right) nodes)))
	(cons insts nodes)))))

(defun run-network (insts nodes)
  (let ((node 'AAA)
	(steps 0)
	(i 0)
	(n (length insts)))
    (while (not (eq node 'ZZZ))
      (let ((next (gethash node nodes)))
	(pcase (elt insts i)
	  (?L (setq node (car next)))
	  (?R (setq node (cdr next)))))
      (setq steps (1+ steps))
      (setq i (mod (1+ i) n)))
    steps))

(defun puzzle-8a ()
  (let* ((network (read-network "data/input-8.txt"))
	 (insts (car network))
	 (nodes (cdr network)))
    (run-network insts nodes)))

(defun start-node-p (node)
  (let ((string (symbol-name node)))
    (eq ?A (elt string (1- (length string))))))

(let ((table (make-hash-table)))
  (defun end-node-p (node)
    (let ((value
	   (or (gethash node table)
	       (let* ((string (symbol-name node))
		      (last (elt string (1- (length string))))
		      (value (if (eq ?Z last) 1 0)))
		 (puthash node value table)))))
      (eq value 1))))

(defun start-nodes (nodes)
  (seq-filter #'start-node-p (hash-table-keys nodes)))

(defun run-network-2 (insts nodes)
  (let* ((here (vconcat (start-nodes nodes)))
	 (steps 0)
	 (i 0)
	 (n (length insts))
	 (m (length here)))
    (while (and (< steps 1000000)
		(not (seq-every-p #'end-node-p here)))
      (dotimes (j m)
	(let ((node (elt here j)))
	  (let ((there (gethash node nodes)))
	    (pcase (elt insts i)
	      (?L (setq node (car there)))
	      (?R (setq node (cdr there)))))
	  (aset here j node)))
      (setq steps (1+ steps))
      (setq i (mod (1+ i) n)))
    steps))

(defun puzzle-8b ()
  (let* ((network (read-network "data/input-8.txt"))
	 (insts (car network))
	 (nodes (cdr network)))
    (run-network-2 insts nodes)))
