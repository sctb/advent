;; -*- lexical-binding: t -*-

(defun read-line ()
  (prog1
      (buffer-substring (point) (line-end-position))
    (forward-line)))

(defun read-network (file)
  (with-temp-buffer
    (insert-file-contents file)
    (let ((insts (read-line)))
      (forward-line)
      (let ((rx "\\([0-9A-Z]+\\) = (\\([0-9A-Z]+\\), \\([0-9A-Z]+\\))")
	    (nodes (make-hash-table)))
	(while (re-search-forward rx nil t)
	  (let ((node (intern (match-string 1)))
		(left (intern (match-string 2)))
		(right (intern (match-string 3))))
	    (puthash node (cons left right) nodes)))
	(cons insts nodes)))))

(defun run-network (insts nodes)
  (let ((node 'AAA)
	(steps 0)
	(i 0)
	(n (length insts)))
    (while (not (eq node 'ZZZ))
      (let ((next (gethash node nodes)))
	(pcase (elt insts i)
	  (?L (setq node (car next)))
	  (?R (setq node (cdr next)))))
      (setq steps (1+ steps))
      (setq i (mod (1+ i) n)))
    steps))

(defun puzzle-8a ()
  (let* ((network (read-network "data/input-8.txt"))
	 (insts (car network))
	 (nodes (cdr network)))
    (run-network insts nodes)))

(defun start-node-p (node)
  (let ((string (symbol-name node)))
    (eq ?A (elt string (1- (length string))))))

(defun end-node-p (node)
  (let ((string (symbol-name node)))
    (eq ?Z (elt string (1- (length string))))))

(defun start-nodes (nodes)
  (seq-filter #'start-node-p (hash-table-keys nodes)))

(defun gcd (list)
  (let ((a (or (pop list) 0)))
    (dolist (b list)
      (while (/= b 0)
        (setq b (% a (setq a b)))))
    (abs a)))

(defun lcm (list)
  (let ((a (or (pop list) 1)))
    (dolist (b list)
      (setq a (* (/ a (gcd (list a b))) b)))
    (abs a)))

(defun simulate-network (insts nodes)
  (let ((start (start-nodes nodes))
	(counts nil)
	(n (length insts)))
    (dolist (node start)
      (let ((steps 0)
	    (i 0))
	(while (not (end-node-p node))
	  (let ((next (gethash node nodes)))
	    (pcase (elt insts i)
	      (?L (setq node (car next)))
	      (?R (setq node (cdr next)))))
	  (setq steps (1+ steps))
	  (setq i (mod (1+ i) n)))
	(push steps counts)))
    (lcm counts)))

(defun puzzle-8b ()
  (let* ((network (read-network "data/input-8.txt"))
	 (insts (car network))
	 (nodes (cdr network)))
    (simulate-network insts nodes)))
