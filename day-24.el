;; -*- lexical-binding: t -*-

(defvar wire-rx "\\(.*\\): \\([01]\\)")
(defvar gate-rx "\\(.*\\) \\([ANDXOR]+\\) \\(.*\\) -> \\(.*\\)")

(defun read-device (file)
  (with-temp-buffer
    (insert-file-contents file)
    (let ((wires (make-hash-table :test 'equal)))
      (while (re-search-forward wire-rx nil t)
	(let ((wire (match-string 1))
	      (value (read (match-string 2))))
	  (puthash wire (list 'VAL value) wires)))
      (while (re-search-forward gate-rx nil t)
	(let ((in1 (match-string 1))
	      (in2 (match-string 3))
	      (op (read (match-string 2)))
	      (out (match-string 4)))
	  (puthash out (list op in1 in2) wires)))
      wires)))

(defun wire-pos (wire)
  (read (substring wire 1)))

(defun decimal (wire bit)
  (let ((shift (wire-pos wire)))
    (ash bit shift)))

(defun input (wire wires)
  (operate (gethash wire wires) wires))

(defun operate (gate wires)
  (if (eq (car gate) 'VAL)
      (cadr gate)
    (pcase-let ((`(,op ,in1 ,in2) gate))
      (let ((a (input in1 wires))
	    (b (input in2 wires)))
	(pcase op
	  ('AND (if (and (eq a 1) (eq b 1)) 1 0))
	  ('XOR (if (not (eq a b)) 1 0))
	  ('OR  (if (or (eq a 1) (eq b 1)) 1 0)))))))

(defun puzzle-24a ()
  (let* ((file "data/input-24.txt")
	 (wires (read-device file))
	 (output 0))
    (maphash (lambda (wire gate)
	       (when (eq (elt wire 0) ?z)
		 (let* ((bit (operate gate wires))
			(n (decimal wire bit)))
		   (setq output (+ output n)))))
	     wires)
    output))

(defun width (wires)
  (let ((max 0))
    (maphash (lambda (wire _)
	       (when (eq (elt wire 0) ?z)
		 (let ((n (wire-pos wire)))
		   (setq max (max n max)))))
	     wires)
    (1+ max)))

(defun wire-name (prefix n)
  (concat prefix (format "%02d" n)))

(defun puzzle-24b ()
  (let* ((max-lisp-eval-depth 5000)
	 (file "data/input-24.txt")
	 (wires (read-device file))
	 (width (width wires)))
    (dotimes (n width)
      (let ((x (input (wire-name "x" n) wires))
	    (y (input (wire-name "y" n) wires))
	    (z (input (wire-name "z" n) wires)))
	(unless (eq z (logxor x y))
	  (message "SUSPECT %s: %s %s â‡’ %s" n x y z))))
    width))

